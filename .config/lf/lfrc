set ratios 1:2:3
# interpreter for shell commands (needs to be POSIX compatible)

set shell zsh
set hidden false
set shellopts '-eu:--shwordsplit'
set filesep "\n"
set icons true
set scrolloff 10
set color256 true
set ifs "\n"
set period 1
set promptfmt "\033[34;1m%w/\033[0m\033[1m%f\033[0m"
# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.


# git integration
cmd git_branch ${{
    git branch | fzf | xargs git checkout 
    pwd_shell=$(pwd)
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}


cmd on-cd &{{
    # display git repository status in your prompt
    source /usr/share/git/completion/git-prompt.sh
    GIT_PS1_SHOWDIRTYSTATE=auto
    GIT_PS1_SHOWSTASHSTATE=auto
    GIT_PS1_SHOWUNTRACKEDFILES=auto
    GIT_PS1_SHOWUPSTREAM=auto
    GIT_PS1_COMPRESSSPARSESTATE=auto
    git=$(__git_ps1 " [GIT BRANCH:> %s]") || true
    fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m$git\033[0m"
    lf -remote "send $id set promptfmt \"$fmt\""
}}


# $lf -remote "send $id set previewer ${XDG_CONFIG_HOME:-$HOME/.config}/lf/scope"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map O $mimeopen --ask $f

# Go to ... dir
map gc :cd ~/.config/
map gb :cd ~/.local/bin/
map gd :cd ~/documents
map gm :cd ~/media
map gM :cd ~/Music
map gl :cd ~/.local
map gD :cd /mnt/c/Users/muizu/Downloads
map gp :cd /mnt/c/Users/muizu/OneDrive/Pictures
map gv :cd /mnt/c/Users/muizu/OneDrive/Videos

# Make Directory
cmd mkdir %mkdir "$(echo $* | tr ' ' '\ ')"
map a push :mkdir<space>
cmd mkdirs %mkdir "$@"
map A push :mkdirs<space>

# Make File
cmd touch %touch "$@"
map I push :touch<space>

# Image Preview
set preview true
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner
# set cleaner ~/.config/lf/cleaner

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) nvim $fx;;
	application/json) nvim $fx;;
    image/x-xcf) gimp $fx;;
    application/msword) word $fx;;
    application/octet-stream) nvim $fx;;
	application/pdf) setsid -f zathura $fx >/dev/null 2>&1 ;;
	inode/*) nvim $fx;;
    image/*) sxiv $fx;;
	video/*) vlc $f >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac

}}

# define a custom 'rename' command without prompt for overwrite
 /*cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1*/
# map r push :rename<space>

# make sure trash folder exists
 %mkdir -p /.Trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %trash-put $fx*/

# define a custom 'delete' command
 cmd delete ${{
     set -f
     printf "$fx\n"
     printf "delete?[y/n]"
     read ans
     [ $ans = "y" ] && rm -rf $fx
 }}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
map V push :!nvim<space>

cmd yank-dirname ${{
    dirname -- "$f" | tr -d '\n' | xclip -i -selection clipboard
}}

cmd yank-path ${{
    echo "$fx" | xclip -i -selection clipboard
}}

cmd yank-basename ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a -- |
      xclip -i -selection clipboard
}}


# zsh integration
cmd zle-cd %printf 'cd %q && zle reset-prompt\n' "$PWD" >&$ZLE_FIFO

cmd zle-insert-relative %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }${(q)$(realpath %q --relative-to=$PWD)}"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-insert-absolute %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }%q"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-init :{{
    map . zle-cd
    map a zle-insert-relative
    map A zle-insert-absolute
}}

&[[ -n "$ZLE_FIFO" ]] && lf -remote "send $id zle-init"

#paste
cmd paste $cp-p --lf-paste $id

cmd paste %{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        cp -R $list .
    elif [ $mode = 'move' ]; then
        mv $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}


cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|' )" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf | sed 's|~|$HOME|' )" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd rifle ${{
    set -f
    rifle -l $f
    read -p "Select runner: " runner
    rifle -p $runner $f
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf $fx
}}


cmd trash ${{
    mkdir -p ~/.trash
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
    if [ -z "$fs" ]; then
     [ $ans = "y" ] && mv "$f" ~/.trash
    else
        IFS="`printf '\n\t'`"; [ $ans = "y" ] &&  mv $fs ~/.trash
    fi
}}



cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a -- |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' | xclip -i -selection clipboard
}}
cmd setbg "$1"
cmd bulkrename $vidir
map <c-f> $lf -remote "send $id select '$(fzf)'"
map J $lf -remote "send $id cd $(cut -d'	' -f2 ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf)"
map B bulkrename
map yp yank-path
map Y yank-basename
map yB yank-basename-without-extension
map yD yank-dirname
map C copyto
map D trash
map E extract
map yb yank-basename-without-extension
map yB yank-basename
map M moveto
map <c-r> reload
map r rename
map <enter> shell
map b $setbg $f
map gb :git_branch
map gp ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
map gs ${{clear; git status; echo "press ENTER"; read ENTER}}
map gl ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}
